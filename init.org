#+title: My Custom Literate Emacs Config
#+author: Bailey Feldewerd
#+property: header-args:emacs-lisp :tangle ./init.el

* EXWM
** Window Management
#+begin_src emacs-lisp
  (defun bf/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)

    ;; Make the focus follow the mouse
    (setq mouse-autoselect-window t
        focus-follows-mouse t)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'bf/exwm-update-class)

    ;; Set the screen resolution
    (require 'exwm-randr)
    (exwm-randr-enable)
    (start-process-shell-command "xrandr" nil "xrandr --output eDP1 --off --output DP1 --primary --mode 2560x1440 --pos 0x0 --rotate normal --output DP2 --off --output HDMI1 --off --output VIRTUAL1 --off")

    ;; Load the system tray
    (require 'exwm-systemtray)
    (exwm-systemtray-enable)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j  ;;Buffer list
            ?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings. These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-s] . exwm-reset)

            ;; Move between windows
            ([?\s-h] . windmove-left)
            ([?\s-j] . windmove-down)
            ([?\s-k] . windmove-up)
            ([?\s-l] . windmove-right)

            ;; Launch applications via shell command
            ([?\s-r] . (lambda (command)
                         (interactive (list (read-shell-command "Run: ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)

            ;; `s-N':  Switch to certain workspace with Super plus a number key (0-9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)).
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))
          
    (exwm-enable))
#+end_src

** Window Transparency
#+begin_src emacs-lisp
    ;; Make the windows transparent
    (set-frame-parameter (selected-frame) 'alpha '(70 . 70))
    (add-to-list 'default-frame-alist '(alpha . (70 . 70)))
    (start-process-shell-command "picom" nil "picom")
#+end_src

** Wallpaper selection
#+begin_src emacs-lisp
  (start-process-shell-command "feh" nil "feh --bg-fill ~/.config/bspwm/wall3.jpg")
#+end_src

* Startup Performance
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
#+begin_src emacs-lisp
  ;; The default is 800  kilobytes. Measured in bytes.
  (setq gc-cons-threshold  (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

* Package Management
Set up ELPA, MELPA, and Org package repositories and load ~use-package~ to manage package configuration
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives  '(("melpa" . "https://melpa.org/packages/")
                            ("org" . "https://orgmode.org/elpa/")
                            ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  ;; Refresh package contents unless they already exist
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize `use-package'
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Keyboard Bindings
** ESC Cancels ALL
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Rebind C-u
Since I let ~evil-mode~ take over ~C-u~ for buffer scrolling, I need to re-bind the ~universal-argument~ command to another key sequence. I'm
choosintg  ~C-M-u~ for this purpose.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

** Let's Be Evil
Some tips can be found here:
[[https://github.com/noctuid/evil-guide][https://github.com/noctuid/evil-guide]]
[[https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html][https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html]]
#+begin_src emacs-lisp
  (defun bf/evil-hook ()
    ;; Make these modes start in emacs mode
    (dolist (mode '(custom-mode
                    term-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    vterm-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (defun bf/dont-arrow-me-bro ()
    "Stop using the arrow keys"
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package undo-tree
    :config
    (global-undo-tree-mode 1))

  (use-package evil
    :demand t
    :init
    (setq evil-undo-system 'undo-tree)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    :hook (evil-mode . bf/evil-hook)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map  (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (define-key evil-normal-state-map (kbd "<left>")  'bf/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<right>")  'bf/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<down>")  'bf/dont-arrow-me-bro)
    (define-key evil-normal-state-map (kbd "<up>")  'bf/dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<left>") 'bf-dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<right>") 'bf-dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<down>") 'bf-dont-arrow-me-bro)
    (evil-global-set-key 'motion (kbd "<up>") 'bf-dont-arrow-me-bro)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

*** Evil Addons
**** Evil Numbers
#+begin_src emacs-lisp
  (use-package evil-numbers
    :after evil
    :bind (:map evil-normal-state-map
                ("C-c +" . evil-numbers/inc-at-pt)
                ("C-c -" . evil-numbers/dec-at-pt)))
#+end_src

** Keybinding Panel (which-key)
[[https://github.com/justbur/emacs/which-key][which-key]] is great for getting an overview of what keybindings are available based on prefix keys you entered. Learned about this one from
Spacemacs.
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** Simplify Leader Bindings (general.el)
[[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings, especially in conjunction with Evil modes.
#+begin_src emacs-lisp
  (use-package general
    :config
    (defun bf/find-user-init-file ()
      "Edit the `user-init-file', in the same window."
      (interactive)
      (find-file "~/.emacs.d/init.org"))

    (defun bf/load-user-init-file ()
      "Reload the `user-init-file'."
      (interactive)
      (load-file user-init-file))

    (defun bf/split-window-horizontally ()
      "Split the window horizontally and select it."
      (interactive)
      (split-window-horizontally)
      (evil-window-right 1))

    (defun bf/split-window-vertically ()
      "Split the window vertically and select it."
      (interactive)
      (split-window-vertically)
      (evil-window-down 1))

    (general-create-definer bf/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (bf/leader-keys
      ;; misc
      "'" 'vterm
      "o" 'org-agenda-list

      ;; Applications
      "a" '(:ignore t :which-key "applications")
      "ad" 'dired
      "ac" 'calendar
      "ao" 'org-agenda

      ;; Toggles
      "t" '(:ignore t :which-key "toggles")
      "tw" 'whitespace-mode
      "tt" '(counsel-load-theme :which-key "choose theme")

      ;; Comments
      "c" '(:ignore t :which-key "comments")
      "cl" 'evilnc-comment-or-uncomment-lines

      ;; Files
      "f" '(:ignore t :which-key "files")
      "ff" 'counsel-find-file
      "fe" '(:ignore t :which-key "emacs")
      "fed" '(bf/find-user-init-file :which-key "edit-emacs-config")
      "feR" '(bf/load-user-init-file :which-key "reload-emacs-config")

      ;; Buffers
      "b" '(:ignore t :which-key "buffers")
      "bb" 'counsel-switch-buffer
      "bk" 'kill-buffer
      "bd" 'kill-buffer-and-window
      "bl" 'buffer-menu

      ;; Windows
      "w" '(:ignore t :which-key "windows")
      "w-" '(bf/split-window-vertically :which-key "split-window-vertically")
      "w/" '(bf/split-window-horizontally :which-key "split-window-horizontally")
      "ww" 'other-window
      "wh" 'evil-window-left
      "wj" 'evil-window-down
      "wk" 'evil-window-up
      "wl" 'evil-window-right
      "wd" 'evil-window-delete
      ))
#+end_src

* File Management
** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom  ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))
#+end_src

* General Configuration
** User Interface
Clean up Emacs' user interface, make it more minimal.
#+begin_src emacs-lisp
  ;; Turn off automatic backups
  (setq make-backup-files nil)

  ;; Turn off the startup message
  (setq inhibit-startup-message t)

  ;; Make window dividers show on bottom and the right
  ;(setq window-divider-default-places t)

  (window-divider-mode 1)  ; Turn on window dividers
  (scroll-bar-mode -1)     ; Turn off the scroll bar
  (tool-bar-mode -1)       ; Turn off the tool bar
  (tooltip-mode -1)        ; Turn off tool-tips
  (set-fringe-mode 10)     ; Set the fringe
  (menu-bar-mode -1)       ; Turn off the menu bar
  (global-hl-line-mode 1)  ; Turn on line highlighting
  (setq visible-bell t)    ; Turn on the visible bell
#+end_src

Improve scrolling.
#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll the window under the mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+end_src

Enable line numbers and Customizer their format
#+begin_src emacs-lisp
  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Theme
I like to use the doom themes because they are well-designed and integrate with a lot of Emacs packages
#+begin_src emacs-lisp
  (use-package doom-themes :defer t)
  (load-theme 'gruvbox t)
  ;;(doom-themes-visual-bell-config)
  (use-package all-the-icons)
#+end_src

** Mode Line
Doom Modeline is what I like to use
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Auto-Reverting Changed Files
#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** Window History with winner-mode
#+begin_src emacs-lisp
  (winner-mode)
#+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t)

  (use-package treemacs-evil
    :after treemacs evil)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :config
    (treemacs-icons-dired-mode))
#+end_src

* Editing Configuration
** Tab Widths
Default to an indentation size of 2 spaces
#+begin_src emacs-lisp
  (setq-default tab-width 2)
  (setq-default  evil-shift-width tab-width)
#+end_src

** Use spaces  instead of tabs for indentation
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Commenting Lines
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter)
#+end_src

* Better Completions with Ivy
I currently use Ivy, Counsel, and Swiper to navigate around files, buffers, and projects super quickly. Here are some workflow notes on how to
best use Ivy:

- While in an Ivy minibuffer, you can search within the current results by using ~S-Space~.
- To see actions for the selected minibuffer item, use ~M-o~ and then press the action's key.
- *Super Useful*: Use ~C-c C-o~ to open ~ivy-occur~ to open the search results in a separate buffer. From there you can click any item to
perform the ivy action.
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
  
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src

* Better Functions with Counsel
Counsel uses different functions that are more helpful and show more info with ~ivy-rich~ package.
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+end_src

* Better Help with Helpful
Helpful lets me see more info when using the built in help command
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Org Mode Configuration
** Basic config
#+begin_src emacs-lisp
  (defun bf/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (use-package org
    :hook (org-mode . bf/org-mode-setup)
    :config
    (setq org-ellipsis "⮟")
    (setq org-hide-emphasis-markers t)

    (setq org-agenda-files
      '("~/OrgFiles/systemcrafters.org"))

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src

** Org-Babel configuration
   #+begin_src emacs-lisp
     ;; Type <el to get a source block for emacs lisp and so on   
     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
   #+end_src

** Auto-tangle Configuration Files
#+begin_src emacs-lisp
  (defun bf/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/init.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'bf/org-babel-tangle-config)))
#+end_src

** Center Org Buffers
I use ~visual-fill-column~ to center ~org-mode~ buffers for a more pleasing writing experience as it centers the contents of the  buffer horizontally
to seem more like you are editing a document.
#+begin_src emacs-lisp
  (defun bf/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode  1))

  (use-package visual-fill-column
    :hook (org-mode . bf/org-mode-visual-fill))
#+end_src

* Shell Configuration
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000))
#+end_src

* Show Commands with Command-Log-Mode
Run the command ~C-c o~ to show the window
#+begin_src emacs-lisp
  (use-package command-log-mode
    :config
    (global-command-log-mode))
#+end_src

* Language Servers with LSP-MODE
** Basic Configuration
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l") ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+end_src

** LSP-UI
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))
#+end_src

** LSP-Treemacs
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

** LSP-Ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy)
#+end_src

** Company Mode For Completions
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
                ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

** Languages
*** TypeScript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

*** Java
#+begin_src emacs-lisp
  (use-package lsp-java
    :hook (java-mode . lsp-deferred))
#+end_src

* Debugging with DAP-MODE
#+begin_src emacs-lisp
  ;;(use-package dap-mode)
#+end_src

* Dump of whole file
